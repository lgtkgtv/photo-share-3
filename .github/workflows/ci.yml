name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_photoapp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        # Install PostgreSQL client tools
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      run: |
        cd backend
        # Create comprehensive test environment file
        cat > .env << EOF
        # Database Configuration for CI/CD
        POSTGRES_DB=test_photoapp
        POSTGRES_USER=test_user
        POSTGRES_PASSWORD=test_password
        DB_HOST=localhost
        DB_PORT=5432
        
        # JWT Configuration for Testing
        JWT_SECRET_KEY=test_secret_key_for_testing_32_chars_minimum_length_requirement
        JWT_ALGORITHM=HS256
        JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
        
        # Legacy Auth Config (for backward compatibility)
        SECRET_KEY=test-secret-key-for-legacy-auth-compatibility
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=30
        
        # Environment Identification
        ENVIRONMENT=test
        DEBUG=false
        TESTING=true
        
        # Security Settings for Testing
        PASSWORD_MIN_LENGTH=8
        PASSWORD_REQUIRE_UPPERCASE=true
        PASSWORD_REQUIRE_LOWERCASE=true
        PASSWORD_REQUIRE_DIGITS=true
        PASSWORD_REQUIRE_SPECIAL=false
        
        # Rate Limiting Settings (relaxed for testing)
        RATE_LIMIT_REQUESTS_PER_MINUTE=100
        RATE_LIMIT_LOGIN_ATTEMPTS_PER_HOUR=20
        ACCOUNT_LOCKOUT_ATTEMPTS=10
        ACCOUNT_LOCKOUT_DURATION_MINUTES=5
        
        # Test Database URL (explicit for CI)
        DATABASE_URL=postgresql+asyncpg://test_user:test_password@localhost:5432/test_photoapp
        EOF
        
        # Show environment for debugging
        echo "=== Test Environment Configuration ==="
        cat .env
        echo "======================================"

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Wait for database to be ready
      run: |
        # Wait for PostgreSQL to be ready
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U test_user; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done

    - name: Initialize test database
      run: |
        cd backend
        # Set environment variables for the initialization
        export POSTGRES_DB=test_photoapp
        export POSTGRES_USER=test_user
        export POSTGRES_PASSWORD=test_password
        export DB_HOST=localhost
        export DB_PORT=5432
        
        # Initialize the database
        python init_db.py
        echo "Database initialized successfully"

    - name: Run security linting
      run: |
        cd backend
        # Run bandit security linter
        bandit -r services/ api/ models/ schemas/ -f json -o bandit-report.json || true
        bandit -r services/ api/ models/ schemas/ || true

    - name: Run dependency vulnerability check
      run: |
        cd backend
        # Check for known vulnerabilities in dependencies
        safety check || true

    - name: Run tests with coverage
      run: |
        cd backend
        # Set environment variables for tests
        export POSTGRES_DB=test_photoapp
        export POSTGRES_USER=test_user
        export POSTGRES_PASSWORD=test_password
        export DB_HOST=localhost
        export DB_PORT=5432
        export ENVIRONMENT=test
        
        # Run tests with coverage
        python -m pytest tests/ -v \
          --cov=services \
          --cov=api \
          --cov=models \
          --cov=schemas \
          --cov-report=xml \
          --cov-report=term \
          --tb=short

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: backend/coverage.xml
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Add deployment steps here (e.g., deploy to staging environment)
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Add deployment steps here (e.g., deploy to production)
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment commands here